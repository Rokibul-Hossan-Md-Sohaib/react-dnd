{"ast":null,"code":"import _objectSpread from \"E:\\\\New folder (3)\\\\react-dnd-example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"E:\\\\New folder (3)\\\\react-dnd-example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:\\\\New folder (3)\\\\react-dnd-example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport shortid from \"shortid\";\nimport { ROW, COLUMN, COMPONENT } from \"./constants\";\n\n// a little function to help us with reordering the result\nexport var reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n  var _result$splice = result.splice(startIndex, 1),\n    _result$splice2 = _slicedToArray(_result$splice, 1),\n    removed = _result$splice2[0];\n  result.splice(endIndex, 0, removed); // inserting task in new index\n\n  return result;\n};\nexport var remove = function remove(arr, index) {\n  return [].concat(_toConsumableArray(arr.slice(0, index)), _toConsumableArray(arr.slice(index + 1)));\n};\nexport var insert = function insert(arr, index, newItem) {\n  return [].concat(_toConsumableArray(arr.slice(0, index)), [\n  // inserted item\n  newItem], _toConsumableArray(arr.slice(index)));\n};\nexport var reorderChildren = function reorderChildren(children, splitDropZonePath, splitItemPath) {\n  if (splitDropZonePath.length === 1) {\n    var dropZoneIndex = Number(splitDropZonePath[0]);\n    var itemIndex = Number(splitItemPath[0]);\n    return reorder(children, itemIndex, dropZoneIndex);\n  }\n  var updatedChildren = _toConsumableArray(children);\n  var curIndex = Number(splitDropZonePath.slice(0, 1));\n\n  // Update the specific node's children\n  var splitDropZoneChildrenPath = splitDropZonePath.slice(1);\n  var splitItemChildrenPath = splitItemPath.slice(1);\n  var nodeChildren = updatedChildren[curIndex];\n  updatedChildren[curIndex] = _objectSpread({}, nodeChildren, {\n    children: reorderChildren(nodeChildren.children, splitDropZoneChildrenPath, splitItemChildrenPath)\n  });\n  return updatedChildren;\n};\nexport var removeChildFromChildren = function removeChildFromChildren(children, splitItemPath) {\n  if (splitItemPath.length === 1) {\n    var itemIndex = Number(splitItemPath[0]);\n    return remove(children, itemIndex);\n  }\n  var updatedChildren = _toConsumableArray(children);\n  var curIndex = Number(splitItemPath.slice(0, 1));\n\n  // Update the specific node's children\n  var splitItemChildrenPath = splitItemPath.slice(1);\n  var nodeChildren = updatedChildren[curIndex];\n  updatedChildren[curIndex] = _objectSpread({}, nodeChildren, {\n    children: removeChildFromChildren(nodeChildren.children, splitItemChildrenPath)\n  });\n  return updatedChildren;\n};\nexport var addChildToChildren = function addChildToChildren(children, splitDropZonePath, item) {\n  if (splitDropZonePath.length === 1) {\n    var dropZoneIndex = Number(splitDropZonePath[0]);\n    return insert(children, dropZoneIndex, item);\n  }\n  var updatedChildren = _toConsumableArray(children);\n  var curIndex = Number(splitDropZonePath.slice(0, 1));\n\n  // Update the specific node's children\n  var splitItemChildrenPath = splitDropZonePath.slice(1);\n  var nodeChildren = updatedChildren[curIndex];\n  updatedChildren[curIndex] = _objectSpread({}, nodeChildren, {\n    children: addChildToChildren(nodeChildren.children, splitItemChildrenPath, item)\n  });\n  return updatedChildren;\n};\nexport var handleMoveWithinParent = function handleMoveWithinParent(layout, splitDropZonePath, splitItemPath) {\n  return reorderChildren(layout, splitDropZonePath, splitItemPath);\n};\nexport var handleAddColumDataToRow = function handleAddColumDataToRow(layout) {\n  var layoutCopy = _toConsumableArray(layout);\n  var COLUMN_STRUCTURE = {\n    type: COLUMN,\n    id: shortid.generate(),\n    children: []\n  };\n  return layoutCopy.map(function (row) {\n    if (!row.children.length) {\n      row.children = [COLUMN_STRUCTURE];\n    }\n    return row;\n  });\n};\nexport var handleMoveToDifferentParent = function handleMoveToDifferentParent(layout, splitDropZonePath, splitItemPath, item) {\n  var newLayoutStructure;\n  var COLUMN_STRUCTURE = {\n    type: COLUMN,\n    id: shortid.generate(),\n    children: [item]\n  };\n  var ROW_STRUCTURE = {\n    type: ROW,\n    id: shortid.generate()\n  };\n  switch (splitDropZonePath.length) {\n    case 1:\n      {\n        // moving column outside into new row made on the fly\n        if (item.type === COLUMN) {\n          newLayoutStructure = _objectSpread({}, ROW_STRUCTURE, {\n            children: [item]\n          });\n        } else {\n          // moving component outside into new row made on the fly\n          newLayoutStructure = _objectSpread({}, ROW_STRUCTURE, {\n            children: [COLUMN_STRUCTURE]\n          });\n        }\n        break;\n      }\n    case 2:\n      {\n        // moving component outside into a row which creates column\n        if (item.type === COMPONENT) {\n          newLayoutStructure = COLUMN_STRUCTURE;\n        } else {\n          // moving column into existing row\n          newLayoutStructure = item;\n        }\n        break;\n      }\n    default:\n      {\n        newLayoutStructure = item;\n      }\n  }\n  var updatedLayout = layout;\n  updatedLayout = removeChildFromChildren(updatedLayout, splitItemPath);\n  updatedLayout = handleAddColumDataToRow(updatedLayout);\n  updatedLayout = addChildToChildren(updatedLayout, splitDropZonePath, newLayoutStructure);\n  return updatedLayout;\n};\nexport var handleMoveSidebarComponentIntoParent = function handleMoveSidebarComponentIntoParent(layout, splitDropZonePath, item) {\n  var newLayoutStructure;\n  switch (splitDropZonePath.length) {\n    case 1:\n      {\n        newLayoutStructure = {\n          type: ROW,\n          id: shortid.generate(),\n          children: [{\n            type: COLUMN,\n            id: shortid.generate(),\n            children: [item]\n          }]\n        };\n        break;\n      }\n    case 2:\n      {\n        newLayoutStructure = {\n          type: COLUMN,\n          id: shortid.generate(),\n          children: [item]\n        };\n        break;\n      }\n    default:\n      {\n        newLayoutStructure = item;\n      }\n  }\n  return addChildToChildren(layout, splitDropZonePath, newLayoutStructure);\n};\nexport var handleRemoveItemFromLayout = function handleRemoveItemFromLayout(layout, splitItemPath) {\n  return removeChildFromChildren(layout, splitItemPath);\n};","map":{"version":3,"names":["shortid","ROW","COLUMN","COMPONENT","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","_result$splice2","_slicedToArray","removed","remove","arr","index","concat","_toConsumableArray","slice","insert","newItem","reorderChildren","children","splitDropZonePath","splitItemPath","length","dropZoneIndex","Number","itemIndex","updatedChildren","curIndex","splitDropZoneChildrenPath","splitItemChildrenPath","nodeChildren","_objectSpread","removeChildFromChildren","addChildToChildren","item","handleMoveWithinParent","layout","handleAddColumDataToRow","layoutCopy","COLUMN_STRUCTURE","type","id","generate","map","row","handleMoveToDifferentParent","newLayoutStructure","ROW_STRUCTURE","updatedLayout","handleMoveSidebarComponentIntoParent","handleRemoveItemFromLayout"],"sources":["E:/New folder (3)/react-dnd-example/src/helpers.js"],"sourcesContent":["import shortid from \"shortid\";\r\nimport { ROW, COLUMN, COMPONENT } from \"./constants\";\r\n\r\n// a little function to help us with reordering the result\r\nexport const reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed); // inserting task in new index\r\n\r\n  return result;\r\n};\r\n\r\nexport const remove = (arr, index) => [\r\n  // part of the array before the specified index\r\n  ...arr.slice(0, index),\r\n  // part of the array after the specified index\r\n  ...arr.slice(index + 1)\r\n];\r\n\r\nexport const insert = (arr, index, newItem) => [\r\n  // part of the array before the specified index\r\n  ...arr.slice(0, index),\r\n  // inserted item\r\n  newItem,\r\n  // part of the array after the specified index\r\n  ...arr.slice(index)\r\n];\r\n\r\nexport const reorderChildren = (children, splitDropZonePath, splitItemPath) => {\r\n  if (splitDropZonePath.length === 1) {\r\n    const dropZoneIndex = Number(splitDropZonePath[0]);\r\n    const itemIndex = Number(splitItemPath[0]);\r\n    return reorder(children, itemIndex, dropZoneIndex);\r\n  }\r\n\r\n  const updatedChildren = [...children];\r\n\r\n  const curIndex = Number(splitDropZonePath.slice(0, 1));\r\n\r\n  // Update the specific node's children\r\n  const splitDropZoneChildrenPath = splitDropZonePath.slice(1);\r\n  const splitItemChildrenPath = splitItemPath.slice(1);\r\n  const nodeChildren = updatedChildren[curIndex];\r\n  updatedChildren[curIndex] = {\r\n    ...nodeChildren,\r\n    children: reorderChildren(\r\n      nodeChildren.children,\r\n      splitDropZoneChildrenPath,\r\n      splitItemChildrenPath\r\n    )\r\n  };\r\n\r\n  return updatedChildren;\r\n};\r\n\r\nexport const removeChildFromChildren = (children, splitItemPath) => {\r\n  if (splitItemPath.length === 1) {\r\n    const itemIndex = Number(splitItemPath[0]);\r\n    return remove(children, itemIndex);\r\n  }\r\n\r\n  const updatedChildren = [...children];\r\n\r\n  const curIndex = Number(splitItemPath.slice(0, 1));\r\n\r\n  // Update the specific node's children\r\n  const splitItemChildrenPath = splitItemPath.slice(1);\r\n  const nodeChildren = updatedChildren[curIndex];\r\n  updatedChildren[curIndex] = {\r\n    ...nodeChildren,\r\n    children: removeChildFromChildren(\r\n      nodeChildren.children,\r\n      splitItemChildrenPath\r\n    )\r\n  };\r\n\r\n  return updatedChildren;\r\n};\r\n\r\nexport const addChildToChildren = (children, splitDropZonePath, item) => {\r\n  if (splitDropZonePath.length === 1) {\r\n    const dropZoneIndex = Number(splitDropZonePath[0]);\r\n    return insert(children, dropZoneIndex, item);\r\n  }\r\n\r\n  const updatedChildren = [...children];\r\n\r\n  const curIndex = Number(splitDropZonePath.slice(0, 1));\r\n\r\n  // Update the specific node's children\r\n  const splitItemChildrenPath = splitDropZonePath.slice(1);\r\n  const nodeChildren = updatedChildren[curIndex];\r\n  updatedChildren[curIndex] = {\r\n    ...nodeChildren,\r\n    children: addChildToChildren(\r\n      nodeChildren.children,\r\n      splitItemChildrenPath,\r\n      item\r\n    )\r\n  };\r\n\r\n  return updatedChildren;\r\n};\r\n\r\nexport const handleMoveWithinParent = (\r\n  layout,\r\n  splitDropZonePath,\r\n  splitItemPath\r\n) => {\r\n  return reorderChildren(layout, splitDropZonePath, splitItemPath);\r\n};\r\n\r\nexport const handleAddColumDataToRow = layout => {\r\n  const layoutCopy = [...layout];\r\n  const COLUMN_STRUCTURE = {\r\n    type: COLUMN,\r\n    id: shortid.generate(),\r\n    children: []\r\n  };\r\n\r\n  return layoutCopy.map(row => {\r\n    if (!row.children.length) {\r\n      row.children = [COLUMN_STRUCTURE];\r\n    }\r\n    return row;\r\n  });\r\n};\r\n\r\nexport const handleMoveToDifferentParent = (\r\n  layout,\r\n  splitDropZonePath,\r\n  splitItemPath,\r\n  item\r\n) => {\r\n  let newLayoutStructure;\r\n  const COLUMN_STRUCTURE = {\r\n    type: COLUMN,\r\n    id: shortid.generate(),\r\n    children: [item]\r\n  };\r\n\r\n  const ROW_STRUCTURE = {\r\n    type: ROW,\r\n    id: shortid.generate()\r\n  };\r\n\r\n  switch (splitDropZonePath.length) {\r\n    case 1: {\r\n      // moving column outside into new row made on the fly\r\n      if (item.type === COLUMN) {\r\n        newLayoutStructure = {\r\n          ...ROW_STRUCTURE,\r\n          children: [item]\r\n        };\r\n      } else {\r\n        // moving component outside into new row made on the fly\r\n        newLayoutStructure = {\r\n          ...ROW_STRUCTURE,\r\n          children: [COLUMN_STRUCTURE]\r\n        };\r\n      }\r\n      break;\r\n    }\r\n    case 2: {\r\n      // moving component outside into a row which creates column\r\n      if (item.type === COMPONENT) {\r\n        newLayoutStructure = COLUMN_STRUCTURE;\r\n      } else {\r\n        // moving column into existing row\r\n        newLayoutStructure = item;\r\n      }\r\n\r\n      break;\r\n    }\r\n    default: {\r\n      newLayoutStructure = item;\r\n    }\r\n  }\r\n\r\n  let updatedLayout = layout;\r\n  updatedLayout = removeChildFromChildren(updatedLayout, splitItemPath);\r\n  updatedLayout = handleAddColumDataToRow(updatedLayout);\r\n  updatedLayout = addChildToChildren(\r\n    updatedLayout,\r\n    splitDropZonePath,\r\n    newLayoutStructure\r\n  );\r\n\r\n  return updatedLayout;\r\n};\r\n\r\nexport const handleMoveSidebarComponentIntoParent = (\r\n  layout,\r\n  splitDropZonePath,\r\n  item\r\n) => {\r\n  let newLayoutStructure;\r\n  switch (splitDropZonePath.length) {\r\n    case 1: {\r\n      newLayoutStructure = {\r\n        type: ROW,\r\n        id: shortid.generate(),\r\n        children: [{ type: COLUMN, id: shortid.generate(), children: [item] }]\r\n      };\r\n      break;\r\n    }\r\n    case 2: {\r\n      newLayoutStructure = {\r\n        type: COLUMN,\r\n        id: shortid.generate(),\r\n        children: [item]\r\n      };\r\n      break;\r\n    }\r\n    default: {\r\n      newLayoutStructure = item;\r\n    }\r\n  }\r\n\r\n  return addChildToChildren(layout, splitDropZonePath, newLayoutStructure);\r\n};\r\n\r\nexport const handleRemoveItemFromLayout = (layout, splitItemPath) => {\r\n  return removeChildFromChildren(layout, splitItemPath);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}